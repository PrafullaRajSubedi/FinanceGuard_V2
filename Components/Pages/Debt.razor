@page "/debt"
@using FinanceGuard.Models
@using FinanceGuard.Services
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager

<style>
    .container {
        display: flex;
        height: 100vh;
    }

    .menu {
        background-color: #2c3e50;
        color: white;
        width: 250px;
        display: flex;
        flex-direction: column;
        padding: 20px;
    }

        .menu a {
            color: white;
            text-decoration: none;
            font-size: 1rem;
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

            .menu a:hover {
                background-color: #34495e;
                color: #ecf0f1;
            }

            .menu a.active {
                background-color: #f39c12;
                font-weight: bold;
            }

    .content {
        flex: 1;
        background-color: #e8f5e9;
        padding: 20px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

        table th, table td {
            text-align: left;
            padding: 10px;
            border: 1px solid #b4c7b4;
        }

        table th {
            background-color: #f39c12;
            color: white;
        }

    .action-button {
        padding: 5px 10px;
        background-color: #27ae60;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .action-button:hover {
            background-color: #2ecc71;
        }

    .add-button {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #f39c12;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

        .add-button:hover {
            background-color: #d87c00;
        }

    .filter-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

        .filter-container input, .filter-container select {
            padding: 8px;
            border: 1px solid #b4c7b4;
            border-radius: 4px;
        }

    .tabs {
        display: flex;
        margin-bottom: 20px;
    }

    .tab {
        padding: 10px 20px;
        cursor: pointer;
        border: 1px solid #b4c7b4;
        background-color: #f39c12;
        color: white;
        margin-right: 5px;
        border-radius: 4px;
    }

        .tab.active {
            background-color: #d87c00;
            font-weight: bold;
        }

    .error-message {
        color: red;
        font-size: 0.9rem;
        margin-bottom: 10px;
    }
</style>

<div class="container">
    <div class="menu">
        <a href="/dashboard">Dashboard</a>
        <a href="/inflow">Cash Inflow</a>
        <a href="/outflow">Cash Outflow</a>
        <a href="/debt" class="active">Debt</a>
    </div>

    <div class="content">
        <div class="header">
            <h1>Debt Management</h1>
            <div>Total Debt: $@TotalDebt</div>
        </div>

        <div class="filter-container">
            <div>
                <input type="date" @bind="StartDate" @bind:event="oninput" placeholder="Start Date" />
                <input type="date" @bind="EndDate" @bind:event="oninput" placeholder="End Date" />
            </div>
        </div>

        <div class="tabs">
            <div class="tab @(SelectedTab == "All" ? "active" : "")" @onclick='@(() => ChangeTab("All"))'>All</div>
            <div class="tab @(SelectedTab == "Pending" ? "active" : "")" @onclick='@(() => ChangeTab("Pending"))'>Pending</div>
            <div class="tab @(SelectedTab == "Cleared" ? "active" : "")" @onclick='@(() => ChangeTab("Cleared"))'>Cleared</div>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }

        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Tags</th>
                    <th>Notes</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (FilteredDebts != null && FilteredDebts.Any())
                {
                    foreach (var debt in FilteredDebts)
                    {
                        <tr>
                            <td>@debt.ID</td>
                            <td>@debt.Date.ToShortDateString()</td>
                            <td>$@debt.Amount</td>
                            <td>@debt.Status</td>
                            <td>@debt.Tags</td>
                            <td>@debt.Notes</td>
                            <td>
                                @if (debt.Status == "Pending")
                                {
                                    <button class="action-button" @onclick="(() => ClearDebt(debt.ID, debt.Amount))">Clear</button>
                                }
                                else
                                {
                                    <span>Cleared</span>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7">No debts found.</td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="add-button" @onclick="NavigateToAddDebt">Add Debt</button>
    </div>
</div>

@code {
    private List<Transaction> Debts { get; set; } = new List<Transaction>();
    private List<Transaction> FilteredDebts { get; set; } = new List<Transaction>();
    private decimal TotalDebt { get; set; }
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private string SelectedTab { get; set; } = "All";
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Debts = await TransactionService.GetTransactionsByTypeAsync("Debt");
        TotalDebt = Debts.Sum(d => d.Amount);
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        FilteredDebts = Debts.Where(d =>
            (!StartDate.HasValue || d.Date >= StartDate) &&
            (!EndDate.HasValue || d.Date <= EndDate) &&
            (SelectedTab == "All" || d.Status == SelectedTab)
        ).ToList();
    }

    private void ChangeTab(string tab)
    {
        SelectedTab = tab;
        ApplyFilters();
    }

    private async Task ClearDebt(int id, decimal amount)
    {
        ErrorMessage = string.Empty;

        var success = await TransactionService.UpdateDebtStatusAsync(id, "Cleared");

        if (success)
        {
            Debts = await TransactionService.GetTransactionsByTypeAsync("Debt");
            TotalDebt = Debts.Sum(d => d.Amount);
            ApplyFilters();
        }
        else
        {
            ErrorMessage = "Failed to clear debt.";
        }
    }

    private void NavigateToAddDebt()
    {
        NavigationManager.NavigateTo("/debtadd");
    }
}
