@page "/dashboard"
@using FinanceGuard.Models
@using FinanceGuard.Services
@inject ITransactionService TransactionService

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
        background-color: #e8f5e9; /* Light green background */
    }

    /* Navbar styles */
    .navbar {
        background-color: #2c3e50; /* Dark blue */
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: white;
        position: fixed;
        width: 100%; /* Ensure the navbar spans full width */
        top: 0;
        left: 0;
        z-index: 1000;
    }

        .navbar a {
            color: white;
            text-decoration: none;
            margin: 0 10px;
            font-size: 1rem;
            padding: 8px 15px;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

            .navbar a:hover {
                background-color: #34495e;
            }

            .navbar a.active {
                background-color: #f39c12; /* Highlighted for active page */
            }

    /* Main content container */
    .dashboard-container {
        margin-top: 70px; /* Offset for fixed navbar */
        padding: 20px;
    }

    .summary-section {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 30px;
    }

    .summary-card {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        flex: 1;
        min-width: 200px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

        .summary-card h3 {
            margin: 10px 0;
            color: #2c3e50;
        }

        .summary-card span {
            font-size: 1.5rem;
            font-weight: bold;
        }

    .transactions-section {
        margin-top: 20px;
    }

    .transactions-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .transactions-table th, .transactions-table td {
            text-align: left;
            padding: 10px;
            border: 1px solid #ddd;
        }

        .transactions-table th {
            background-color: #34495e;
            color: white;
        }

        .transactions-table td {
            background-color: #ffffff;
        }

    .positive {
        color: #27ae60;
    }

    .negative {
        color: #e74c3c;
    }
</style>

<!-- Navbar -->
<div class="navbar">
    <h2>FinanceGuard Dashboard</h2>
    <div>
        <a href="/dashboard" class="active">Dashboard</a>
        <a href="/inflow">Cash Inflow</a>
        <a href="/outflow">Cash Outflow</a>
        <a href="/debt">Debt</a>
    </div>
</div>

<div class="dashboard-container">
    <!-- Summary Section -->
    <div class="summary-section">
        <div class="summary-card">
            <h3>Total Inflows</h3>
            <span class="positive">@CurrencySymbol @TotalInflows</span>
        </div>
        <div class="summary-card">
            <h3>Total Outflows</h3>
            <span class="negative">@CurrencySymbol @TotalOutflows</span>
        </div>
        <div class="summary-card">
            <h3>Total Debts</h3>
            <span class="negative">@CurrencySymbol @TotalDebts</span>
        </div>
        <div class="summary-card">
            <h3>Pending Debt</h3>
            <span class="negative">@CurrencySymbol @PendingDebt</span>
        </div>
        <div class="summary-card">
            <h3>Cleared Debt</h3>
            <span class="positive">@CurrencySymbol @ClearedDebt</span>
        </div>
        <div class="summary-card">
            <h3>Total Balance</h3>
            <span class="@((TotalBalance >= 0) ? "positive" : "negative")">@CurrencySymbol @TotalBalance</span>
        </div>
    </div>

    <!-- Transactions Section -->
    <div class="transactions-section">
        <h2>Top 5 Transactions</h2>

        <h3>Top 5 Inflows</h3>
        <table class="transactions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in TopInflows)
                {
                    <tr>
                        <td>@transaction.ID</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                        <td>@CurrencySymbol @transaction.Amount</td>
                        <td>@transaction.Tags</td>
                        <td>@transaction.Notes</td>
                    </tr>
                }
            </tbody>
        </table>

        <h3>Top 5 Outflows</h3>
        <table class="transactions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in TopOutflows)
                {
                    <tr>
                        <td>@transaction.ID</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                        <td>@CurrencySymbol @transaction.Amount</td>
                        <td>@transaction.Tags</td>
                        <td>@transaction.Notes</td>
                    </tr>
                }
            </tbody>
        </table>

        <h3>Top 5 Pending Debts</h3>
        <table class="transactions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in TopPendingDebts)
                {
                    <tr>
                        <td>@transaction.ID</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                        <td>@CurrencySymbol @transaction.Amount</td>
                        <td>@transaction.Tags</td>
                        <td>@transaction.Notes</td>
                    </tr>
                }
            </tbody>
        </table>

        <h3>Top 5 Cleared Debts</h3>
        <table class="transactions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in TopClearedDebts)
                {
                    <tr>
                        <td>@transaction.ID</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                        <td>@CurrencySymbol @transaction.Amount</td>
                        <td>@transaction.Tags</td>
                        <td>@transaction.Notes</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Transaction> Transactions { get; set; } = new List<Transaction>();

    // Summary variables
    private decimal TotalInflows { get; set; }
    private decimal TotalOutflows { get; set; }
    private decimal TotalDebts { get; set; }
    private decimal PendingDebt { get; set; }
    private decimal ClearedDebt { get; set; }
    private decimal TotalBalance { get; set; }
    private string CurrencySymbol { get; set; } = "$";

    // Top transactions lists
    private List<Transaction> TopInflows { get; set; } = new List<Transaction>();
    private List<Transaction> TopOutflows { get; set; } = new List<Transaction>();
    private List<Transaction> TopPendingDebts { get; set; } = new List<Transaction>();
    private List<Transaction> TopClearedDebts { get; set; } = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        Transactions = await TransactionService.GetAllTransactionsAsync();

        // Calculate summary
        TotalInflows = Transactions.Where(t => t.Type == "Inflow").Sum(t => t.Amount);
        TotalOutflows = Transactions.Where(t => t.Type == "Outflow").Sum(t => t.Amount);
        TotalDebts = Transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        PendingDebt = Transactions.Where(t => t.Type == "Debt" && t.Status == "Pending").Sum(t => t.Amount);
        ClearedDebt = Transactions.Where(t => t.Type == "Debt" && t.Status == "Cleared").Sum(t => t.Amount);

        // Prevent negative balance
        TotalBalance = Math.Max(0, TotalInflows - TotalOutflows - PendingDebt);

        // Extract top transactions
        ExtractTopTransactions();
    }

    private void ExtractTopTransactions()
    {
        TopInflows = GetTopTransactions("Inflow");
        TopOutflows = GetTopTransactions("Outflow");
        TopPendingDebts = GetTopDebtsByStatus("Pending");
        TopClearedDebts = GetTopDebtsByStatus("Cleared");
    }

    private List<Transaction> GetTopTransactions(string type)
    {
        return Transactions
            .Where(t => t.Type == type)
            .OrderByDescending(t => t.Amount)
            .Take(5)
            .ToList();
    }

    private List<Transaction> GetTopDebtsByStatus(string status)
    {
        return Transactions
            .Where(t => t.Type == "Debt" && t.Status == status)
            .OrderByDescending(t => t.Amount)
            .Take(5)
            .ToList();
    }
}
