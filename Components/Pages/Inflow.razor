@page "/inflow"
@using FinanceGuard.Models
@using FinanceGuard.Services
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager

<style>
    .container {
        display: flex;
        height: 100vh;
    }

    .menu {
        background-color: #2c3e50;
        color: white;
        width: 250px;
        display: flex;
        flex-direction: column;
        padding: 20px;
    }

        .menu a {
            color: white;
            text-decoration: none;
            font-size: 1rem;
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

            .menu a:hover {
                background-color: #34495e;
            }

    .content {
        flex: 1;
        background-color: #e8f5e9;
        padding: 20px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .table-section {
        margin-top: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

        table th, table td {
            text-align: left;
            padding: 10px;
            border: 1px solid #b4c7b4;
        }

        table th {
            background-color: #2ecc71;
            color: white;
        }

    .filter-container {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

        .filter-container input, .filter-container select {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #b4c7b4;
        }

    .add-button {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #2ecc71;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

        .add-button:hover {
            background-color: #27ae60;
        }

    .menu a:hover {
        background-color: #34495e;
    }

    /* Highlight for the currently active page */
    .menu a.active {
        background-color: #27ae60;
        font-weight: bold;
    }
</style>

<div class="container">
    <!-- Menu Section -->
    <div class="menu">
        <a href="/dashboard">Dashboard</a>
        <a href="/inflow" class="active">Cash Inflow</a>
        <a href="/outflow">Cash Outflow</a>
        <a href="/debt">Debt</a>
    </div>

    <!-- Content Section -->
    <div class="content">
        <!-- Header Section with Title and Total Inflows -->
        <div class="header" id="inflow-header">
            <h1>Cash Inflow</h1>
            <div id="total-inflow-summary">Total Inflows: $@TotalInflows</div>
        </div>

        <!-- Filter Section for Date and Tags -->
        <div class="filter-container" id="inflow-filters">
            <!-- Start Date Input -->
            <input id="filter-start-date" type="date" @bind="StartDate" placeholder="Start Date" />
            <!-- End Date Input -->
            <input id="filter-end-date" type="date" @bind="EndDate" placeholder="End Date" />
            <!-- Tag Filter Dropdown -->
            <select id="filter-tags" @bind="SelectedTag">
                <option value="">All Tags</option>
                <option value="Salary">Salary</option>
                <option value="Investment">Investment</option>
            </select>
        </div>

        <!-- Table Section for Displaying Inflows -->
        <div class="table-section">
            <table id="inflow-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Tags</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>

                 
                    @if (FilteredTransactions != null && FilteredTransactions.Any())
                    {
                        foreach (var transaction in FilteredTransactions)
                        {
                            <tr>
                                <td>@transaction.ID</td>
                                <td>@transaction.Date.ToShortDateString()</td>
                                <td>@transaction.Amount</td>
                                <td>@transaction.Tags</td>
                                <td>@transaction.Notes</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5">No inflows found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Button to Navigate to Add Inflow Page -->
        <button id="add-inflow-button" class="add-button" @onclick="NavigateToAdd">Add Inflow</button>
    </div>
</div>

@code {

    // Date range for filtering
    private DateTime? StartDate
    {
        get => _startDate;
        set
        {
            _startDate = value;
            ApplyFilters(); 
        }
    }

    private DateTime? EndDate
    {
        get => _endDate;
        set
        {
            _endDate = value;
            ApplyFilters(); 
        }
    }

    private DateTime? _startDate;
    private DateTime? _endDate;

    // Selected tag for filtering
    private string SelectedTag
    {
        get => _selectedTag;
        set
        {
            _selectedTag = value;
            ApplyFilters(); // Trigger filtering on tag change
        }
    }

    private string _selectedTag = string.Empty;

    // List to store all transactions of type "Inflow"
    private List<Transaction> AllTransactions { get; set; } = new List<Transaction>();

    // List to store filtered transactions
    private List<Transaction> FilteredTransactions { get; set; } = new List<Transaction>();

    // Total amount of inflows
    private decimal TotalInflows => FilteredTransactions.Sum(t => t.Amount);

    // Load all inflows when the component initializes
    protected override async Task OnInitializedAsync()
    {
        AllTransactions = await TransactionService.GetTransactionsByTypeAsync("Inflow");
        FilteredTransactions = new List<Transaction>(AllTransactions); // Set initial filtered list
    }

    // Apply filters for date range and selected tag
    private void ApplyFilters()
    {
        FilteredTransactions = AllTransactions.Where(t =>
            (!StartDate.HasValue || t.Date >= StartDate.Value) &&
            (!EndDate.HasValue || t.Date <= EndDate.Value) &&
            (string.IsNullOrEmpty(SelectedTag) || t.Tags.Contains(SelectedTag, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    // Navigate to the Add Inflow page
    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("/inflowadd");
    }
}
