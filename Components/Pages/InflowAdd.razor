@page "/inflowadd"
@using FinanceGuard.Models
@using FinanceGuard.Services
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager

<style>
    /* Main container for the entire page */
    .container {
        display: flex;
        height: 100vh; /* Full viewport height */
        width: 100%; /* Full width of the viewport */
        margin: 0;
        padding: 0;
    }

    /* Navigation menu styles */
    .menu {
        background-color: #2c3e50; /* Dark blue background */
        color: white;
        width: 250px; /* Fixed width */
        height: 100%; /* Full height of the page */
        display: flex;
        flex-direction: column;
        padding: 20px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
        position: fixed; /* Keeps the menu fixed to the left */
        left: 0; /* Aligns it to the far left */
        top: 0; /* Starts at the top */
    }

        /* Navigation links inside the menu */
        .menu a {
            color: white;
            text-decoration: none;
            font-size: 1rem;
            margin: 10px 0;
            padding: 10px 15px;
            border-radius: 4px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

            /* Hover effect for menu links */
            .menu a:hover {
                background-color: #34495e;
                color: #ecf0f1;
            }

            /* Active menu link */
            .menu a.active {
                background-color: #27ae60;
                font-weight: bold;
                color: white;
            }

    /* Main content area */
    .content {
        margin-left: 250px; /* Offset by the width of the fixed menu */
        flex: 1;
        background-color: #e8f5e9; /* Light green background */
        padding: 20px;
        height: 100vh;
        overflow-y: auto; /* Enables scrolling if content exceeds viewport */
    }

    /* Form row styles */
    .form-row {
        margin-bottom: 15px;
    }

        /* Label styles for form fields */
        .form-row label {
            font-size: 1rem;
            margin-bottom: 5px;
            display: block; /* Ensures proper alignment */
        }

        /* Input, select, and textarea styles */
        .form-row input, .form-row select, .form-row textarea {
            width: 100%; 
            padding: 10px;
            font-size: 1rem;
            border: 1px solid #b4c7b4; 
            border-radius: 4px;
        }

    
    .add-button {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #2ecc71; /* Green background */
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

        
        .add-button:hover {
            background-color: #27ae60;
        }

    
    .error-message {
        color: red;
        font-size: 0.9rem;
        margin-bottom: 10px;
    }
</style>

<div class="container">
    
    <div class="menu">
        <a href="/dashboard">Dashboard</a>
        <a href="/inflow" class="active">Cash Inflow</a>
        <a href="/outflow">Cash Outflow</a>
        <a href="/debt">Debt</a>
    </div>

    <div class="content">
        <h1 id="add-inflow-header">Add Cash Inflow</h1>

        <!-- Display error message if any issue occurs during submission -->
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }

        <!-- Inflow form -->
        <form id="add-inflow-form" @onsubmit="HandleFormSubmit">
            <div class="form-row">
                <!-- Date input for the transaction -->
                <label for="inflow-date">Date</label>
                <input id="inflow-date" type="date" @bind="Transaction.Date" required />
            </div>
            <div class="form-row">
                <!-- Input for the transaction amount -->
                <label for="inflow-amount">Amount</label>
                <input id="inflow-amount" type="number" @bind="Transaction.Amount" required />
            </div>
            <div class="form-row">
                <!-- Dropdown for default tags  -->
                <label for="default-tags">Default Tags</label>
                <select id="default-tags" @onchange="SetDefaultTag">
                    <option value="">Select a tag</option>
                    <option value="Salary">Salary</option>
                    <option value="Investment">Investment</option>
                    <option value="Investment">Loan</option>
                    
                </select>
            </div>
            <div class="form-row">
                <!-- Custom tags input for additional tag -->
                <label for="custom-tags">Custom Tags</label>
                <input id="custom-tags" type="text" @bind="CustomTags" placeholder="Enter custom tags (optional)" />
            </div>
            <div class="form-row">
                <!-- Notes section for adding extra details about the transaction -->
                <label for="inflow-notes">Notes</label>
                <textarea id="inflow-notes" rows="3" @bind="Transaction.Notes" placeholder="Add any notes (optional)"></textarea>
            </div>
            <!-- Submit button to save the transaction -->
            <button id="submit-inflow-button" type="submit" class="add-button">Add Inflow</button>
        </form>
    </div>
</div>

@code {
    // The transaction object for this form
    private Transaction Transaction { get; set; } = new Transaction
        {
            Type = "Inflow", // Automatically set the transaction type to Inflow
            Date = DateTime.Now, // Default date is set to the current date
            Amount = 0,
            Tags = string.Empty,
            Notes = string.Empty
        };

    // Custom tags entered by the user
    private string CustomTags { get; set; } = string.Empty;

    // Holds any error message to display to the user
    private string ErrorMessage { get; set; } = string.Empty;

    // Method to set the default tag when a selection is made
    private void SetDefaultTag(ChangeEventArgs e)
    {
        if (e.Value is string selectedTag && !string.IsNullOrWhiteSpace(selectedTag))
        {
            Transaction.Tags = selectedTag; // Assign the selected tag to the transaction
        }
    }

    // Handles form submission
    private async Task HandleFormSubmit()
    {
        ErrorMessage = string.Empty; // Reset error message on new submission

        // Combine default and custom tags
        if (!string.IsNullOrWhiteSpace(CustomTags))
        {
            Transaction.Tags = string.IsNullOrWhiteSpace(Transaction.Tags)
                ? CustomTags // Use custom tags if no default tag is selected
                : $"{Transaction.Tags}, {CustomTags}"; // Combine default and custom tags
        }

        try
        {
            // Save the transaction 
            await TransactionService.AddTransactionAsync(Transaction);
            // Redirect to the inflow list page after successful submission
            NavigationManager.NavigateTo("/inflow");
        }
        catch (Exception ex)
        {
            // Display error if saving fails
            ErrorMessage = $"Error saving transaction: {ex.Message}";
        }
    }
}
